//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "StaticHtml.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
 #include "json/json.h" 
using namespace drogon;
std::string StaticHtml::genText(const DrTemplateData& StaticHtml_view_data)
{
	drogon::OStringStream StaticHtml_tmp_stream;
	std::string layoutName{""};
 
    auto staticData = StaticHtml_view_data.get<Json::Value>("staticData");
	StaticHtml_tmp_stream << "<div class=\"static-data\" style=\"position: absolute; opacity: 0;\">\n";
	StaticHtml_tmp_stream << "    ";
 for (auto it = staticData["data"].begin(); it != staticData["data"].end(); ++it) { 
	StaticHtml_tmp_stream << "        <div class=\"static-game\">\n";
	StaticHtml_tmp_stream << "            <p>";
StaticHtml_tmp_stream<<it->get("name", "").asString();
	StaticHtml_tmp_stream << "</p>\n";
	StaticHtml_tmp_stream << "            <div>\n";
	StaticHtml_tmp_stream << "                ";
 Json::Value genres = it->get("genres", Json::ValueType::arrayValue); 
	StaticHtml_tmp_stream << "                ";
 for (auto jt = genres.begin(); jt != genres.end(); ++jt) { 
	StaticHtml_tmp_stream << "                    <span>";
StaticHtml_tmp_stream<<jt->asString();
	StaticHtml_tmp_stream << "</span>\n";
	StaticHtml_tmp_stream << "                    ";
 auto tmp = jt; 
	StaticHtml_tmp_stream << "                    ";
 ++tmp; 
	StaticHtml_tmp_stream << "                    ";
 if (tmp != genres.end()) { 
	StaticHtml_tmp_stream << "                        <span> / </span>\n";
	StaticHtml_tmp_stream << "                    ";
 } 
	StaticHtml_tmp_stream << "                ";
 } 
	StaticHtml_tmp_stream << "            </div>\n";
	StaticHtml_tmp_stream << "        </div>\n";
	StaticHtml_tmp_stream << "    ";
 } 
	StaticHtml_tmp_stream << "</div>\n";
if(layoutName.empty())
{
std::string ret{std::move(StaticHtml_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = StaticHtml_view_data;
auto str = std::move(StaticHtml_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
